package com.garijotatiana.atomacademy.gui.principal;

import com.garijotatiana.atomacademy.DAO.NotaDAO;
import com.garijotatiana.atomacademy.DAO.impl.NotaDAOImplHiber;
import com.garijotatiana.atomacademy.model.Nota;
import com.toedter.calendar.JCalendar;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Timer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.util.Rotation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Tatiana
 */
public class panelInicio extends javax.swing.JPanel {
    NotaDAO notasDAO = new NotaDAOImplHiber(Nota.class);

    public panelInicio() {
        initComponents();
        cargarGraficoNotas();
        cargarDate();
        cargarCalendario();
        cargarGraficoCursos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnGraficoNotasGenerales = new javax.swing.JPanel();
        btActualizar = new javax.swing.JButton();
        pnFecha = new javax.swing.JPanel();
        laReloj = new javax.swing.JLabel();
        pnAlumnos = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        pnGraficoNotasGenerales.setLayout(new java.awt.BorderLayout());

        btActualizar.setBackground(new java.awt.Color(140, 166, 219));
        btActualizar.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/actualizar.png"))); // NOI18N
        btActualizar.setToolTipText("Actualizar");
        btActualizar.setBorderPainted(false);
        btActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btActualizar.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btActualizar.setMargin(new java.awt.Insets(2, 4, 3, 14));
        btActualizar.setMaximumSize(new java.awt.Dimension(113, 39));
        btActualizar.setMinimumSize(new java.awt.Dimension(113, 39));
        btActualizar.setPreferredSize(new java.awt.Dimension(133, 39));
        btActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btActualizarActionPerformed(evt);
            }
        });

        pnFecha.setBackground(new java.awt.Color(255, 255, 255));
        pnFecha.setLayout(new java.awt.BorderLayout());

        laReloj.setFont(new java.awt.Font("Rubik", 1, 18)); // NOI18N
        laReloj.setForeground(new java.awt.Color(185, 147, 214));

        pnAlumnos.setBackground(new java.awt.Color(255, 255, 255));
        pnAlumnos.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnAlumnos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnGraficoNotasGenerales, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(pnFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                                .addComponent(laReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(laReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(pnGraficoNotasGenerales, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(pnAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btActualizarActionPerformed
        cargarGraficoNotas();
        cargarDate();
        cargarCalendario();
        cargarGraficoCursos();
    }//GEN-LAST:event_btActualizarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btActualizar;
    private javax.swing.JLabel laReloj;
    private javax.swing.JPanel pnAlumnos;
    private javax.swing.JPanel pnFecha;
    private javax.swing.JPanel pnGraficoNotasGenerales;
    // End of variables declaration//GEN-END:variables

    private void cargarCalendario(){
        JCalendar calendario=new JCalendar();
        calendario.setBackground(Color.WHITE);
        
        pnFecha.add(calendario,BorderLayout.CENTER);
    }
    
    private void cargarDate() {
        // Iniciar el temporizador para actualizar el reloj cada segundo 
        Timer timer = new Timer(1000, e -> actualizarReloj());
        timer.start();
    }
    
    private void actualizarReloj() { 
        //SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss"); 
        SimpleDateFormat formatoFecha = new SimpleDateFormat("HH:mm:ss"); 
        String fechaHora = formatoFecha.format(new Date()); 
        laReloj.setText(fechaHora); }

    private void cargarGraficoNotas() {
        int aprobados = notasDAO.countNotasWhereAprobados().intValue();
        int suspensos = notasDAO.countNotasWhereSuspensos().intValue();
        int notables = notasDAO.countNotasWhereNotables().intValue();
        int sobresaliente = notasDAO.countNotasWhereSobresalientes().intValue();

        aprobados=aprobados-(notables+sobresaliente);
        
        DefaultPieDataset datos = new DefaultPieDataset();
        datos.setValue("Aprobado", aprobados);
        datos.setValue("Suspenso", suspensos);
        datos.setValue("Notable", notables);
        datos.setValue("Sobresaliente", sobresaliente);

        JFreeChart graficoNotas = ChartFactory.createPieChart3D(
                "Notas Generales", //nombre del gráfico
                datos, //datos
                true, //nombre de las categorías
                true, // herramientas
                false //generar URL
        );
        graficoNotas.setBackgroundPaint(Color.WHITE);
        graficoNotas.getTitle().setPaint(Color.decode("#8CA6DB"));//cambiar color del titulo

        PiePlot3D plot = (PiePlot3D) graficoNotas.getPlot();
        plot.setStartAngle(250);
        plot.setDirection(Rotation.ANTICLOCKWISE);
        plot.setForegroundAlpha(0.5f);
        plot.setBackgroundPaint(Color.WHITE);
        //cambiar color secciones
        plot.setSectionPaint("Aprobados", Color.pink);

        //cambiar color a las etiquetas
        plot.setLabelBackgroundPaint(Color.WHITE);
        plot.setLabelPaint(Color.decode("#8CA6DB"));
        //cambiar la fuente de las etiquetas
        plot.setLabelFont(new Font("Arial", Font.BOLD, 10));
        //color lineas etiquetas
        plot.setLabelLinkPaint(Color.decode("#8CA6DB"));

        plot.setOutlinePaint(Color.white);

        //pintar recuadro leyenda
        graficoNotas.getLegend().setBackgroundPaint(Color.white);

        ChartPanel panel = new ChartPanel(graficoNotas);
        panel.setBackground(Color.WHITE);
        panel.setMouseWheelEnabled(true);
        panel.setPreferredSize(new Dimension(325, 250));

        pnGraficoNotasGenerales.removeAll();
        pnGraficoNotasGenerales.add(panel, BorderLayout.NORTH);

        pnGraficoNotasGenerales.validate();
        pnGraficoNotasGenerales.repaint();
    }
    
    
    /*private void cargarGraficoCursos(){
        List<Curso> cursos=cursoDAO.findCursosByIncompletos();
        DefaultCategoryDataset datos=new DefaultCategoryDataset();
        
        for(Curso i: cursos){
            datos.setValue(i.getNumAlu(),"Alumnos", i.getNombre());
            datos.setValue(i.getCapacidad(),"Capaciad", i.getNombre());
        }
        
        JFreeChart graficoBarras= ChartFactory.createBarChart(
                "Datos Ocupación Cursos" ,       //nombre del gráfico
                "" ,       //nombre de las barras o columnas
                "Número de Alumnos",        //nombre de la numeración
                datos,       //datos del gráfico
                PlotOrientation.VERTICAL,       //orientación
                true,       //leyenda de barras individuales
                true,        //herramientas
                false   //url del gráfico
        );
        
        
        graficoBarras.getTitle().setPaint(Color.decode("#8CA6DB"));
        CategoryPlot catPlot= (CategoryPlot) graficoBarras.getPlot();
        BarRenderer rendere=(BarRenderer) catPlot.getRenderer();
        
        rendere.setSeriesPaint(0, Color.decode("#8CA6DB"));
        rendere.setSeriesPaint(1, Color.decode("#B993D6"));
        
      
        CategoryAxis xAxis = catPlot.getDomainAxis(); 
        xAxis.setLabelPaint(Color.decode("#8CA6DB"));
        
        ValueAxis yAxis = catPlot.getRangeAxis(); 
        yAxis.setLabelPaint(Color.decode("#8CA6DB"));
        
        ChartPanel panel= new ChartPanel(graficoBarras);
        panel.setMouseWheelEnabled(true);
        panel.setPreferredSize(new Dimension(307,800));
        
        
        pnAlumnos.removeAll();
        pnAlumnos.add(panel);

        pnAlumnos.validate();
        pnAlumnos.repaint();
        
    }*/
    
    
    private void cargarGraficoCursos(){
        
        int apro1EV=notasDAO.countNotasWhereAprobadosByEvaluacion("1ª EV").intValue();
        int apro2EV=notasDAO.countNotasWhereAprobadosByEvaluacion("2ª EV").intValue();
        int apro3EV=notasDAO.countNotasWhereAprobadosByEvaluacion("3ª EV").intValue();
        int aproFEV=notasDAO.countNotasWhereAprobadosByEvaluacion("FINAL").intValue();
        int sus1EV=notasDAO.countNotasWhereSuspensosByEvaluacion("1ª EV").intValue();
        int sus2EV=notasDAO.countNotasWhereSuspensosByEvaluacion("2ª EV").intValue();
        int sus3EV=notasDAO.countNotasWhereSuspensosByEvaluacion("3ª EV").intValue();
        int susFEV=notasDAO.countNotasWhereSuspensosByEvaluacion("FINAL").intValue();
        
        DefaultCategoryDataset datos=new DefaultCategoryDataset();
        
       
            datos.setValue(apro1EV,"Aprobados", "1ª EV");
            datos.setValue(apro2EV,"Aprobados", "2ª EV");
            datos.setValue(apro3EV,"Aprobados", "3ª EV");
            datos.setValue(aproFEV,"Aprobados", "FINAL");
            datos.setValue(sus1EV,"Suspensos", "1ª EV");
            datos.setValue(sus2EV,"Suspensos", "2ª EV");
            datos.setValue(sus3EV,"Suspensos", "3ª EV");
            datos.setValue(susFEV,"Suspensos", "FINAL");
        
        
        JFreeChart graficoBarras= ChartFactory.createBarChart(
                "NOTAS POR EVALUACIÓN" ,       //nombre del gráfico
                "" ,       //nombre de las barras o columnas
                "Nº Alumnos",        //nombre de la numeración
                datos,       //datos del gráfico
                PlotOrientation.VERTICAL,       //orientación
                true,       //leyenda de barras individuales
                true,        //herramientas
                false   //url del gráfico
        );
        
        
        graficoBarras.getTitle().setPaint(Color.decode("#8CA6DB"));
        CategoryPlot catPlot= (CategoryPlot) graficoBarras.getPlot();
        BarRenderer rendere=(BarRenderer) catPlot.getRenderer();
        
        rendere.setSeriesPaint(0, Color.decode("#8CA6DB"));
        rendere.setSeriesPaint(1, Color.decode("#B993D6"));
        
      
        CategoryAxis xAxis = catPlot.getDomainAxis(); 
        xAxis.setLabelPaint(Color.decode("#8CA6DB"));
        
        ValueAxis yAxis = catPlot.getRangeAxis(); 
        yAxis.setLabelPaint(Color.decode("#8CA6DB"));
        
        ChartPanel panel= new ChartPanel(graficoBarras);
        panel.setMouseWheelEnabled(true);
        panel.setPreferredSize(new Dimension(307,800));
        
        
        pnAlumnos.removeAll();
        pnAlumnos.add(panel);

        pnAlumnos.validate();
        pnAlumnos.repaint();
        
    }

}

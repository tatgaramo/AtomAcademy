package com.garijotatiana.atomacademy.gui.notas;

import com.garijotatiana.atomacademy.Auxiliar;
import com.garijotatiana.atomacademy.DAO.AlumnoDAO;
import com.garijotatiana.atomacademy.DAO.CursoDAO;
import com.garijotatiana.atomacademy.DAO.NotaDAO;
import com.garijotatiana.atomacademy.DAO.impl.AlumnoDAOImplHiber;
import com.garijotatiana.atomacademy.DAO.impl.CursoDAOImplHiber;
import com.garijotatiana.atomacademy.DAO.impl.NotaDAOImplHiber;
import com.garijotatiana.atomacademy.model.Alumno;
import com.garijotatiana.atomacademy.model.Curso;
import com.garijotatiana.atomacademy.model.Nota;
import java.awt.Color;
import java.awt.Window;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.SwingUtilities;

/**
 *
 * @author Tatiana
 */
public class panelNuevoNotas extends javax.swing.JPanel {

    AlumnoDAO alumnoDAO = new AlumnoDAOImplHiber(Alumno.class);
    NotaDAO notaDAO = new NotaDAOImplHiber(Nota.class);
    CursoDAO cursoDAO = new CursoDAOImplHiber(Curso.class);
    Auxiliar aux = new Auxiliar();

    public panelNuevoNotas() {
        initComponents();
        cargarComboCursos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pDatosNotas = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        cmbDoc = new javax.swing.JComboBox<>();
        txtNombre = new javax.swing.JTextField();
        txtDoc = new javax.swing.JTextField();
        btBuscar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        cmbCurso = new javax.swing.JComboBox<>();
        cmbEvaluacion = new javax.swing.JComboBox<>();
        btLimpiar = new javax.swing.JButton();
        btGuardar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ftxtNota = new javax.swing.JFormattedTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        pDatosNotas.setBackground(new java.awt.Color(255, 255, 255));
        pDatosNotas.setPreferredSize(new java.awt.Dimension(683, 621));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(79, 79, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(79, 79, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(79, 79, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Curso:");

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(79, 79, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Documento:");

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(79, 79, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Evaluación:");

        txtID.setBackground(new java.awt.Color(242, 242, 242));
        txtID.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtID.setForeground(new java.awt.Color(102, 102, 102));
        txtID.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtID.setActionCommand("<Not Set>");
        txtID.setBorder(null);
        txtID.setOpaque(true);
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIDKeyReleased(evt);
            }
        });

        cmbDoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "NIE" }));
        cmbDoc.setBackground(Color.WHITE);
        cmbDoc.setOpaque(true);

        txtNombre.setBackground(new java.awt.Color(242, 242, 242));
        txtNombre.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(102, 102, 102));
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtNombre.setActionCommand("<Not Set>");
        txtNombre.setBorder(null);
        txtNombre.setOpaque(true);

        txtDoc.setBackground(new java.awt.Color(242, 242, 242));
        txtDoc.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtDoc.setForeground(new java.awt.Color(102, 102, 102));
        txtDoc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDoc.setActionCommand("<Not Set>");
        txtDoc.setBorder(null);
        txtDoc.setOpaque(true);

        btBuscar.setBackground(new java.awt.Color(140, 166, 219));
        btBuscar.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buscar.png"))); // NOI18N
        btBuscar.setBorderPainted(false);
        btBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btBuscar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btBuscar.setMargin(new java.awt.Insets(2, 2, 3, 14));
        btBuscar.setPreferredSize(new java.awt.Dimension(133, 39));
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(79, 79, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Apellidos:");

        txtApellidos.setBackground(new java.awt.Color(242, 242, 242));
        txtApellidos.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtApellidos.setForeground(new java.awt.Color(102, 102, 102));
        txtApellidos.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtApellidos.setActionCommand("<Not Set>");
        txtApellidos.setBorder(null);
        txtApellidos.setOpaque(true);

        cmbCurso.setBackground(Color.WHITE);
        cmbCurso.setOpaque(true);

        cmbEvaluacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1ª EV", "2ª EV", "3ª EV", "FINAL" }));
        cmbEvaluacion.setBackground(Color.WHITE);
        cmbEvaluacion.setOpaque(true);

        btLimpiar.setBackground(new java.awt.Color(140, 166, 219));
        btLimpiar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/borrar.png"))); // NOI18N
        btLimpiar.setText(" Limpiar");
        btLimpiar.setBorderPainted(false);
        btLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLimpiar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btLimpiar.setPreferredSize(new java.awt.Dimension(149, 39));
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        btGuardar.setBackground(new java.awt.Color(140, 166, 219));
        btGuardar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disquete.png"))); // NOI18N
        btGuardar.setText(" Guardar");
        btGuardar.setBorderPainted(false);
        btGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btGuardar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btGuardar.setPreferredSize(new java.awt.Dimension(149, 39));
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(79, 79, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Nota:");

        ftxtNota.setBackground(new java.awt.Color(242, 242, 242));
        ftxtNota.setForeground(new java.awt.Color(102, 102, 102));
        try {
            ftxtNota.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtNota.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ftxtNota.setFont(new java.awt.Font("Yu Gothic UI", 1, 16)); // NOI18N

        javax.swing.GroupLayout pDatosNotasLayout = new javax.swing.GroupLayout(pDatosNotas);
        pDatosNotas.setLayout(pDatosNotasLayout);
        pDatosNotasLayout.setHorizontalGroup(
            pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosNotasLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDatosNotasLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDatosNotasLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbEvaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(95, 95, 95)
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(ftxtNota)))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pDatosNotasLayout.createSequentialGroup()
                                .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pDatosNotasLayout.createSequentialGroup()
                                .addComponent(cmbDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        pDatosNotasLayout.setVerticalGroup(
            pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosNotasLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(ftxtNota, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmbEvaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pDatosNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pDatosNotas, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        txtID.setText("");
        txtNombre.setText("");
        txtApellidos.setText("");
        txtDoc.setText("");
        ftxtNota.setText("");

        cmbDoc.setSelectedIndex(0);
        cmbCurso.setSelectedIndex(0);
        cmbEvaluacion.setSelectedIndex(0);

        txtNombre.setEditable(true);
        txtApellidos.setEditable(true);
        txtDoc.setEditable(true);
        ftxtNota.setEditable(true);

        cmbDoc.setEnabled(true);
        cmbCurso.setEnabled(true);
        cmbEvaluacion.setEnabled(true);

        txtNombre.requestFocus();
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
        String nombre = txtNombre.getText();
        String apellidos = txtApellidos.getText();
        String doc = txtDoc.getText().toUpperCase();
        String tipoDoc = (String) cmbDoc.getSelectedItem();
        String nombreCurso = (String) cmbCurso.getSelectedItem();
        String evaluacion = (String) cmbEvaluacion.getSelectedItem();
        String valorNota = ftxtNota.getText();

        Alumno alumno = null;
        Curso curso = null;
        List<Alumno> listaAlumnos = alumnoDAO.findAll();
        List<Nota> listaNotas = notaDAO.findAll();
        List<Curso> listaCursos = cursoDAO.findAll();
        List<Curso> listaMisCursos = null;

        //Si se ha introducido un valor para ID, se busca y cargan los datos del alumno que coincida
        if (!txtID.getText().isEmpty() && !txtID.getText().trim().isEmpty()) {
            try {//comprobar que el valor introducido para ID es un valor numérico válido y si existe en la BD
                int id = Integer.parseInt(txtID.getText());
                //convertir la lista en stream y recorrerla buscando una coincidencia por id
                boolean exiteID = listaAlumnos.stream().anyMatch(r -> r.getId().equals(id));
                //si existe el id del alumno en la BD
                if (exiteID) {
                    //buscar alumno por id
                    alumno = alumnoDAO.findById(id);
                    //buscar curso por nombre
                    curso = cursoDAO.findByName(nombreCurso);

                    //comprobar si el alumno pertenece al curso seleccionado
                    int idCurso = curso.getId();
                    listaMisCursos = alumno.getCursos();
                    boolean perteneceCurso = listaMisCursos.stream().anyMatch(r -> r.getId().equals(idCurso));
                    if (perteneceCurso) {
                        //comprobar que la nota tiene valor y es un valor válido 
                        if (!valorNota.isEmpty() && !valorNota.trim().isEmpty()) {
                            try {
                                String formatoNota = "^\\d+\\.\\d{2}$";
                                Pattern pattern = Pattern.compile(formatoNota);
                                Matcher matcher = pattern.matcher(valorNota);
                                if (matcher.matches()) {//si el valor de nota tiene el formato válido
                                    float notaValida = Float.parseFloat(valorNota);
                                    boolean rangoNota = (notaValida <= 10.00 && notaValida >= 00.00);//comprobar si el valor esta dentro de un rango válido
                                    //comprobar si ya existe un registro del alumno para ese periodo
                                    boolean existeNota = listaNotas.stream().anyMatch(r -> r.getAlumno().getId().equals(id) && r.getEvaluacion().equals(evaluacion) && r.getCurso().getNombre().equals(nombreCurso));
                                    if (!existeNota && rangoNota) {//comprobar si no existe un registro ese periodo y la nota está dentro del rango

                                        Nota nota = new Nota();

                                        nota.setAlumno(alumno);
                                        nota.setCurso(curso);
                                        nota.setEvaluacion(evaluacion);
                                        nota.setNota(notaValida);

                                        notaDAO.save(nota);

                                        //cerrar ventana
                                        Window parent = SwingUtilities.getWindowAncestor(this);
                                        parent.dispose();

                                    } else {
                                        if (existeNota) {
                                            aux.mostrarMensaje("Ya existe un Registro de Nota para el Curso y la Evaluación seleccionada", "Error", "Error");

                                        }
                                        if (!rangoNota) {
                                            aux.mostrarMensaje("La nota debe estar dentro de rango 10.00 - 00.00", "Error", "Error");

                                        }
                                    }
                                } else {
                                    aux.mostrarMensaje("Debe introducir valor de nota válido", "Error", "Error");
                                }

                            } catch (Exception ex) {
                                aux.mostrarMensaje("Error", "Error", "Error");
                            }
                        } else {
                            aux.mostrarMensaje("Debe introducir un valor para Nota", "Error", "Error");
                        }
                    } else {
                        aux.mostrarMensaje("El Alumno " + alumno.getNombre() + " " + alumno.getApellidos() + " no pertenece al curso seleccionado", "Error", "Error");
                    }

                } else {
                    aux.mostrarMensaje("El ID introducido no existe", "Error", "Error");
                }

            } catch (NumberFormatException ex) {
                aux.mostrarMensaje("Error: Debe introducir valor ID numérico válido", "Error", "Error");
            } catch (Exception ex) {
                aux.mostrarMensaje("Error...", "Error", "Error");
            }
        } else {//no se ha introducido un valor para ID, se busca el alumno comprobando en conjunto nombre, apellidos y documento
            boolean valido;
            //comprobar que el valor introducido para el documento es válido
            valido = aux.validarDocumento(doc, tipoDoc);
            if (valido) {//si el documento es válido
                boolean existe = false;
                //comprobar si coincide algún registro en la BD con los datos introducidos por el usuario
                if (listaAlumnos != null) {
                    for (Alumno result : listaAlumnos) {
                        if (result.getNombre().equals(nombre) && result.getApellidos().equals(apellidos) && result.getDocumento().equals(doc)) {
                            existe = true;
                            alumno = result;
                            break;

                        } else {
                            existe = false;
                        }
                    }
                }
                if (existe) {//si los datos introducidos por el usuario existen en la BD
                    //buscar curso por nombre
                    curso = cursoDAO.findByName(nombreCurso);
                    //comprobar si el alumno pertenece al curso seleccionado
                    int idCurso = curso.getId();
                    listaMisCursos = alumno.getCursos();
                    boolean perteneceCurso = listaMisCursos.stream().anyMatch(r -> r.getId().equals(idCurso));
                    if (perteneceCurso) {
                        //comprobar que la nota tiene valor y es un valor válido 
                        if (!valorNota.isEmpty() && !valorNota.trim().isEmpty()) {
                            try {
                                String formatoNota = "^\\d+\\.\\d{2}$";
                                Pattern pattern = Pattern.compile(formatoNota);
                                Matcher matcher = pattern.matcher(valorNota);
                                if (matcher.matches()) {//si el valor de nota tiene el formato válido
                                    float notaValida = Float.parseFloat(valorNota);
                                    int id = alumno.getId();
                                    boolean rangoNota = (notaValida <= 10.00 && notaValida >= 00.00);
                                    boolean existeNota = listaNotas.stream().anyMatch(r -> r.getAlumno().getId().equals(id) && r.getEvaluacion().equals(evaluacion) && r.getCurso().getNombre().equals(nombreCurso));
                                    if (!existeNota && rangoNota) {//comprobar si ya existe un registro del alumno para ese periodo

                                        Nota nota = new Nota();

                                        nota.setAlumno(alumno);
                                        nota.setCurso(curso);
                                        nota.setEvaluacion(evaluacion);
                                        nota.setNota(notaValida);

                                        notaDAO.save(nota);

                                        //cerrar ventana
                                        Window parent = SwingUtilities.getWindowAncestor(this);
                                        parent.dispose();

                                    } else {
                                        if (existeNota) {
                                            aux.mostrarMensaje("Ya existe un Registro de Nota para el Curso y la Evaluación seleccionada", "Error", "Error");

                                        }
                                        if (!rangoNota) {
                                            aux.mostrarMensaje("La nota debe estar dentro de rango 10.00 - 00.00", "Error", "Error");

                                        }
                                    }
                                } else {
                                    aux.mostrarMensaje("Debe introducir valor de nota válido", "Error", "Error");
                                }

                            } catch (Exception ex) {
                                aux.mostrarMensaje("Error", "Error", "Error");
                            }
                        } else {
                            aux.mostrarMensaje("Debe introducir un valor para Nota", "Error", "Error");
                        }
                    } else {
                        aux.mostrarMensaje("El Alumno " + alumno.getNombre() + " " + alumno.getApellidos() + " no pertenece al curso seleccionado", "Error", "Error");
                    }
                } else {
                    aux.mostrarMensaje("Revise los datos introducidos, Nombre, Apellidos y Documento deben ser válidos y coincidir. Puede intentarlo con el ID", "Info", "Info");
                }
            }
        }

    }//GEN-LAST:event_btGuardarActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        if (!txtID.getText().isEmpty() && !txtID.getText().trim().isEmpty()) {
            try {
                int id = Integer.parseInt(txtID.getText());

                Alumno alumno = alumnoDAO.findById(id);

                txtNombre.setText(alumno.getNombre());
                txtNombre.setEditable(false);
                txtApellidos.setText(alumno.getApellidos());
                txtApellidos.setEditable(false);
                txtDoc.setText(alumno.getDocumento());
                txtDoc.setEditable(false);
                cmbDoc.setEnabled(false);

            } catch (NumberFormatException ex) {
                aux.mostrarMensaje("Error: Debe introducir valor numérico válido", "Error", "Error");
            } catch (Exception ex) {
                aux.mostrarMensaje("Error: No existe ningún alumno con el ID intoducido", "Error", "Error");
            }

        } else {
            aux.mostrarMensaje("Error: Debe introducir el Número de ID", "Error", "Error");
        }
    }//GEN-LAST:event_btBuscarActionPerformed

    private void txtIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyReleased
        if (!txtID.getText().isEmpty() && !txtID.getText().trim().isEmpty()) {
            txtNombre.setEditable(false);
            txtNombre.setText("");
            txtApellidos.setEditable(false);
            txtApellidos.setText("");
            txtDoc.setEditable(false);
            txtDoc.setText("");
            cmbDoc.setEnabled(false);

        } else {
            txtNombre.setEditable(true);
            txtApellidos.setEditable(true);
            txtDoc.setEditable(true);
            cmbDoc.setEnabled(true);
        }
    }//GEN-LAST:event_txtIDKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btGuardar;
    private javax.swing.JButton btLimpiar;
    private javax.swing.JComboBox<String> cmbCurso;
    private javax.swing.JComboBox<String> cmbDoc;
    private javax.swing.JComboBox<String> cmbEvaluacion;
    private javax.swing.JFormattedTextField ftxtNota;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel pDatosNotas;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtDoc;
    public javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void cargarComboCursos() {
        List<Curso> listaCursos = cursoDAO.findAll();

        try {
            if (listaCursos != null) {
                for (Curso resultado : listaCursos) {
                    cmbCurso.addItem(resultado.getNombre());
                }
            }
        } catch (Exception ex) {
            aux.mostrarMensaje("Error al cargar los datos, Actualice los Cursos", "Error", "Error");
        }
    }

}

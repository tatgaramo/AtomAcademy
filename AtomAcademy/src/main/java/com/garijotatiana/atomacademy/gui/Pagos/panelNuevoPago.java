package com.garijotatiana.atomacademy.gui.Pagos;

import com.garijotatiana.atomacademy.Auxiliar;
import com.garijotatiana.atomacademy.DAO.AlumnoDAO;
import com.garijotatiana.atomacademy.DAO.PagoDAO;
import com.garijotatiana.atomacademy.DAO.impl.AlumnoDAOImplHiber;
import com.garijotatiana.atomacademy.DAO.impl.PagoDAOImplHiber;
import com.garijotatiana.atomacademy.model.Alumno;
import com.garijotatiana.atomacademy.model.Pago;
import java.awt.Color;
import java.awt.Window;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author Tatiana
 */
public class panelNuevoPago extends javax.swing.JPanel {

    AlumnoDAO alumnoDAO = new AlumnoDAOImplHiber(Alumno.class);
    PagoDAO pagoDAO = new PagoDAOImplHiber(Pago.class);
    Auxiliar aux= new Auxiliar();

    public panelNuevoPago() {
        initComponents();
        cargarComboAnyo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pDatosPago = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        cmbDoc = new javax.swing.JComboBox<>();
        txtNombre = new javax.swing.JTextField();
        txtDoc = new javax.swing.JTextField();
        btBuscar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        cmbMes = new javax.swing.JComboBox<>();
        cmbAnyo = new javax.swing.JComboBox<>();
        btLimpiar = new javax.swing.JButton();
        btGuardar = new javax.swing.JButton();
        ftxtFechaPago = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        pDatosPago.setBackground(new java.awt.Color(255, 255, 255));
        pDatosPago.setPreferredSize(new java.awt.Dimension(683, 621));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(79, 79, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID Alumno:");

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(79, 79, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(79, 79, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Periodo:");

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(79, 79, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Documento:");

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(79, 79, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Fecha Pago:");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fecha.png"))); // NOI18N

        txtID.setBackground(new java.awt.Color(242, 242, 242));
        txtID.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtID.setForeground(new java.awt.Color(102, 102, 102));
        txtID.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtID.setActionCommand("<Not Set>");
        txtID.setBorder(null);
        txtID.setOpaque(true);
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIDKeyReleased(evt);
            }
        });

        cmbDoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "NIE" }));
        cmbDoc.setBackground(Color.WHITE);
        cmbDoc.setOpaque(true);

        txtNombre.setBackground(new java.awt.Color(242, 242, 242));
        txtNombre.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(102, 102, 102));
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtNombre.setActionCommand("<Not Set>");
        txtNombre.setBorder(null);
        txtNombre.setOpaque(true);

        txtDoc.setBackground(new java.awt.Color(242, 242, 242));
        txtDoc.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtDoc.setForeground(new java.awt.Color(102, 102, 102));
        txtDoc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDoc.setActionCommand("<Not Set>");
        txtDoc.setBorder(null);
        txtDoc.setOpaque(true);

        btBuscar.setBackground(new java.awt.Color(140, 166, 219));
        btBuscar.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buscar.png"))); // NOI18N
        btBuscar.setToolTipText("Buscar");
        btBuscar.setBorderPainted(false);
        btBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btBuscar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btBuscar.setMargin(new java.awt.Insets(2, 2, 3, 14));
        btBuscar.setPreferredSize(new java.awt.Dimension(133, 39));
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(79, 79, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Apellidos:");

        txtApellidos.setBackground(new java.awt.Color(242, 242, 242));
        txtApellidos.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtApellidos.setForeground(new java.awt.Color(102, 102, 102));
        txtApellidos.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtApellidos.setActionCommand("<Not Set>");
        txtApellidos.setBorder(null);
        txtApellidos.setOpaque(true);

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SEP", "OCT", "NOV", "DIC" }));
        cmbDoc.setBackground(Color.WHITE);
        cmbMes.setOpaque(true);

        cmbAnyo.setBackground(Color.WHITE);
        cmbAnyo.setOpaque(true);

        btLimpiar.setBackground(new java.awt.Color(140, 166, 219));
        btLimpiar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/borrar.png"))); // NOI18N
        btLimpiar.setText(" Limpiar");
        btLimpiar.setBorderPainted(false);
        btLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLimpiar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btLimpiar.setPreferredSize(new java.awt.Dimension(149, 39));
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        btGuardar.setBackground(new java.awt.Color(140, 166, 219));
        btGuardar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disquete.png"))); // NOI18N
        btGuardar.setText(" Guardar");
        btGuardar.setBorderPainted(false);
        btGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btGuardar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btGuardar.setPreferredSize(new java.awt.Dimension(149, 39));
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        ftxtFechaPago.setBackground(new java.awt.Color(242, 242, 242));
        try {
            ftxtFechaPago.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtFechaPago.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel14.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(79, 79, 255));
        jLabel14.setText("yyyy-MM-dd");

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(79, 79, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("*");

        javax.swing.GroupLayout pDatosPagoLayout = new javax.swing.GroupLayout(pDatosPago);
        pDatosPago.setLayout(pDatosPagoLayout);
        pDatosPagoLayout.setHorizontalGroup(
            pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosPagoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosPagoLayout.createSequentialGroup()
                        .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDatosPagoLayout.createSequentialGroup()
                                .addGap(139, 139, 139)
                                .addComponent(cmbDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(pDatosPagoLayout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDatosPagoLayout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(41, Short.MAX_VALUE))
                    .addGroup(pDatosPagoLayout.createSequentialGroup()
                        .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDatosPagoLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(cmbAnyo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pDatosPagoLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pDatosPagoLayout.createSequentialGroup()
                                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14)
                                    .addGroup(pDatosPagoLayout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ftxtFechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDatosPagoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        pDatosPagoLayout.setVerticalGroup(
            pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosPagoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosPagoLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAnyo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosPagoLayout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ftxtFechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel6)))
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(45, 45, 45)
                .addGroup(pDatosPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pDatosPago, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pDatosPago, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        txtID.setText("");
        txtNombre.setText("");
        txtApellidos.setText("");
        txtDoc.setText("");
        ftxtFechaPago.setText("");

        cmbAnyo.setSelectedIndex(0);
        cmbMes.setSelectedIndex(0);
        cmbDoc.setSelectedIndex(0);

        txtNombre.setEditable(true);
        txtApellidos.setEditable(true);
        txtDoc.setEditable(true);
        cmbDoc.setEnabled(true);

        txtNombre.requestFocus();
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
        String nombre = txtNombre.getText();
        String apellidos = txtApellidos.getText();
        String doc = txtDoc.getText().toUpperCase();
        String tipoDoc = (String) cmbDoc.getSelectedItem();
        String periodo = (String) cmbMes.getSelectedItem() + cmbAnyo.getSelectedItem();
        Alumno alumno = null;
        List<Alumno> listaAlumnos = alumnoDAO.findAll();
        List<Pago> listaPagos = pagoDAO.findAll();

        //Si se ha introducido un valor para ID, se busca y cargan los datos del alumno que coincida
        if (!txtID.getText().isEmpty() && !txtID.getText().trim().isEmpty()) {
            try {//comprobar que el valor introducido para ID es un valor numérico válido y si existe en la BD
                int id = Integer.parseInt(txtID.getText());
                //convertir la lista en stream y recorrerla buscando una coincidencia por id
                boolean exiteID = listaAlumnos.stream().anyMatch(r -> r.getId().equals(id));
                //si existe el id en la BD
                if (exiteID) {
                    String fecha = ftxtFechaPago.getText();
                    //comprobar que la fecha tiene valor y es un valor válido y dentro de un rango especificado
                    if (!fecha.isEmpty() && !fecha.trim().isEmpty()) {
                        try {
                            LocalDate fechaPago = LocalDate.parse(fecha, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                            boolean fechaValida = validarRangoFecha(fechaPago);
                            if (fechaValida) {//si la fecha es válida se guarda el registro
                                alumno = alumnoDAO.findById(id);

                                boolean existePeriodo = listaPagos.stream().anyMatch(r -> r.getAlumno().getId().equals(id) && r.getPeriodo().equals(periodo));
                                if (!existePeriodo) {//comprobar si ya existe un registro del alumno para ese periodo
                                    Pago pago = new Pago();
                                    pago.setFecha(fechaPago);
                                    pago.setAlumno(alumno);
                                    pago.setPeriodo(periodo);

                                    pagoDAO.save(pago);

                                    //cerrar ventana
                                    Window parent = SwingUtilities.getWindowAncestor(this);
                                    parent.dispose();
                                } else {
                                    aux.mostrarMensaje("Ya existe un Registro de Pago para el periodo introducido", "Error", "Error");
                                }
                            } else {
                                aux.mostrarMensaje("No se pueden procesar pagos tan antiguos", "Error", "Error");
                            }

                        } catch (Exception ex) {
                            aux.mostrarMensaje("Debe introducir una fecha válida", "Error", "Error");
                        }
                    } else {
                        aux.mostrarMensaje("Debe introducir una fecha", "Error", "Error");
                    }
                } else {
                    aux.mostrarMensaje("El ID introducido no existe", "Error", "Error");
                }

            } catch (NumberFormatException ex) {
                aux.mostrarMensaje("Error: Debe introducir valor ID numérico válido", "Error", "Error");
            } catch (Exception ex) {
                aux.mostrarMensaje("Error: No existe ningún alumno con el ID intoducido", "Error", "Error");
            }
        } else {//no se ha introducido un valor para ID, se busca el alumno comprobando en conjunto nombre, apellidos y documento
            boolean valido;
            //comprobar que el valor introducido para el documento es válido
            valido = aux.validarDocumento(doc, tipoDoc);
            if (valido) {//si el documento es válido
                boolean existe = false;
                //comprobar si coincide algún registro en la BD con los datos introducidos por el usuario
                if (listaAlumnos != null) {
                    for (Alumno result : listaAlumnos) {
                        if (result.getNombre().equals(nombre) && result.getApellidos().equals(apellidos) && result.getDocumento().equals(doc)) {
                            existe = true;
                            alumno = result;
                            break;

                        } else {
                            existe = false;
                        }
                    }
                }
                if (existe) {//si los datos introducidos por el usuario existen en la BD
                    String fecha = ftxtFechaPago.getText();
                    //comprobar que la fecha no está vacía 
                    if (!fecha.isEmpty() && !fecha.trim().isEmpty()) {
                        try {//comprobar que el valor de fecha es válido y está dentro de un rango específico
                            LocalDate fechaPago = LocalDate.parse(fecha, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                            boolean fechaValida = validarRangoFecha(fechaPago);
                            if (fechaValida) {//si la fecha es válida se guarda el registro
                                int id = alumno.getId();
                                boolean existePeriodo = listaPagos.stream().anyMatch(r -> r.getAlumno().getId().equals(id) && r.getPeriodo().equals(periodo));
                                if (!existePeriodo) {//comprobar si ya existe un registro del alumno para ese periodo

                                    Pago pago = new Pago();
                                    pago.setFecha(fechaPago);
                                    pago.setAlumno(alumno);
                                    pago.setPeriodo(periodo);

                                    pagoDAO.save(pago);

                                    //cerrar ventana
                                    Window parent = SwingUtilities.getWindowAncestor(this);
                                    parent.dispose();
                                } else {
                                    aux.mostrarMensaje("Ya existe un Registro de Pago para el periodo introducido", "Error", "Error");
                                }
                            } else {
                                aux.mostrarMensaje("No se pueden procesar pagos tan antiguos", "Error", "Error");
                            }

                        } catch (Exception ex) {
                            aux.mostrarMensaje("Debe introducir una fecha válida", "Error", "Error");
                        }
                    } else {
                        aux.mostrarMensaje("Debe introducir una fecha", "Error", "Error");
                    }
                } else {
                    aux.mostrarMensaje("Revise los datos introducidos, Nombre, Apellidos y Documento deben ser válidos y coincidir. Puede intentarlo con el ID", "Info", "Info");
                }
            }
        }

    }//GEN-LAST:event_btGuardarActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        if (!txtID.getText().isEmpty() && !txtID.getText().trim().isEmpty()) {
            try {
                int id = Integer.parseInt(txtID.getText());

                Alumno alumno = alumnoDAO.findById(id);

                txtNombre.setText(alumno.getNombre());
                txtNombre.setEditable(false);
                txtApellidos.setText(alumno.getApellidos());
                txtApellidos.setEditable(false);
                txtDoc.setText(alumno.getDocumento());
                txtDoc.setEditable(false);
                cmbDoc.setEnabled(false);

            } catch (NumberFormatException ex) {
                aux.mostrarMensaje("Error: Debe introducir valor numérico válido", "Error", "Error");
            } catch (Exception ex) {
                aux.mostrarMensaje("Error: No existe ningún alumno con el ID intoducido", "Error", "Error");
            }

        } else {
            aux.mostrarMensaje("Error: Debe introducir el Número de ID", "Error", "Error");
        }
    }//GEN-LAST:event_btBuscarActionPerformed

    private void txtIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyReleased
        if (!txtID.getText().isEmpty() && !txtID.getText().trim().isEmpty()) {
            txtNombre.setEditable(false);
            txtNombre.setText("");
            txtApellidos.setEditable(false);
            txtApellidos.setText("");
            txtDoc.setEditable(false);
            txtDoc.setText("");
            cmbDoc.setEnabled(false);

        } else {
            txtNombre.setEditable(true);
            txtApellidos.setEditable(true);
            txtDoc.setEditable(true);
            cmbDoc.setEnabled(true);
        }
    }//GEN-LAST:event_txtIDKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btGuardar;
    private javax.swing.JButton btLimpiar;
    private javax.swing.JComboBox<String> cmbAnyo;
    private javax.swing.JComboBox<String> cmbDoc;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JFormattedTextField ftxtFechaPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel pDatosPago;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtDoc;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

   
    private boolean validarRangoFecha(LocalDate fechaNac) {
        boolean valida;
        LocalDate fechaMax = LocalDate.now().minusYears(70);
        LocalDate fechaMin = LocalDate.now();

        valida = !(fechaNac.isAfter(fechaMin) || fechaNac.isBefore(fechaMax));
        return valida;
    }

    private void cargarComboAnyo() {
        int anyoActual = LocalDate.now().getYear();
        int anyoPasado = LocalDate.now().minusYears(20).getYear();

        for (int i = anyoActual; i >= anyoPasado; i--) {
            cmbAnyo.addItem(Integer.toString(i));
        }
    }

}

package com.garijotatiana.atomacademy.gui.curso;

import com.garijotatiana.atomacademy.Auxiliar;
import com.garijotatiana.atomacademy.DAO.CursoDAO;
import com.garijotatiana.atomacademy.DAO.ProfesorDAO;
import com.garijotatiana.atomacademy.DAO.impl.CursoDAOImplHiber;
import com.garijotatiana.atomacademy.DAO.impl.ProfesorDAOImplHiber;
import com.garijotatiana.atomacademy.model.Curso;
import com.garijotatiana.atomacademy.model.Profesor;
import java.awt.Color;
import java.awt.Window;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.SwingUtilities;

/**
 *
 * @author Tatiana
 */
public class panelNuevoCurso extends javax.swing.JPanel {

    Auxiliar aux=new Auxiliar();
    ProfesorDAO profesorDAO = new ProfesorDAOImplHiber(Profesor.class);
    CursoDAO cursoDAO = new CursoDAOImplHiber(Curso.class);
    Curso curso = new Curso();
    //Mapas para almacenar los datos que se muestran en los comboBox de Día y Hora con la referencia al valor que se almacena en la BD (LUNES 09:00-10:00=> L9)
    HashMap<String, String> dias = new HashMap<>();
    HashMap<String, String> horas = new HashMap<>();

    public panelNuevoCurso() {
        initComponents();

        dias.put("L", "LUNES");
        dias.put("M", "MARTES");
        dias.put("X", "MIÉRCOLES");
        dias.put("J", "JUEVES");
        dias.put("V", "VIERNES");

        horas.put("9", "09:00 - 10:00");
        horas.put("10", "10:00 - 11:00");
        horas.put("11", "11:00 - 12:00");
        horas.put("12", "12:00 - 13:00");
        horas.put("13", "13:00 - 14:00");
        horas.put("14", "14:00 - 15:00");
        horas.put("15", "15:00 - 16:00");
        horas.put("16", "16:00 - 17:00");
        horas.put("17", "17:00 - 18:00");
        horas.put("18", "18:00 - 19:00");
        horas.put("19", "19:00 - 20:00");
        horas.put("20", "20:00 - 21:00");
        horas.put("21", "21:00 - 22:00");
        cargarComboProfesores();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pDatosCurso = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btLimpiar = new javax.swing.JButton();
        btGuardar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtCapacidad = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbDias = new javax.swing.JComboBox<>();
        cmbHorario = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        cmbProfesores = new javax.swing.JComboBox<>();
        spDescripcion = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtCuota = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();

        pDatosCurso.setBackground(new java.awt.Color(255, 255, 255));
        pDatosCurso.setPreferredSize(new java.awt.Dimension(683, 621));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(79, 79, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Nombre:");

        btLimpiar.setBackground(new java.awt.Color(140, 166, 219));
        btLimpiar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/borrar.png"))); // NOI18N
        btLimpiar.setText(" Limpiar");
        btLimpiar.setBorderPainted(false);
        btLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLimpiar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btLimpiar.setPreferredSize(new java.awt.Dimension(149, 39));
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        btGuardar.setBackground(new java.awt.Color(140, 166, 219));
        btGuardar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disquete.png"))); // NOI18N
        btGuardar.setText(" Guardar");
        btGuardar.setBorderPainted(false);
        btGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btGuardar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btGuardar.setPreferredSize(new java.awt.Dimension(149, 39));
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        txtNombre.setBackground(new java.awt.Color(242, 242, 242));
        txtNombre.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(102, 102, 102));
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtNombre.setActionCommand("<Not Set>");
        txtNombre.setBorder(null);
        txtNombre.setOpaque(true);

        jLabel16.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(79, 79, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Nº Alumnos:");

        txtCapacidad.setBackground(new java.awt.Color(242, 242, 242));
        txtCapacidad.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtCapacidad.setForeground(new java.awt.Color(102, 102, 102));
        txtCapacidad.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCapacidad.setActionCommand("<Not Set>");
        txtCapacidad.setBorder(null);
        txtCapacidad.setOpaque(true);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(79, 79, 255), 1, true));
        jPanel2.setOpaque(false);

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(79, 79, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Día:");

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(79, 79, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Horario:");

        cmbDias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LUNES", "MARTES", "MIÉRCOLES", "JUEVES", "VIERNES" }));
        cmbDias.setBackground(Color.WHITE);
        cmbDias.setOpaque(true);

        cmbHorario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00 - 10:00", "10:00 - 11:00", "11:00 - 12:00", "12:00 - 13:00", "13:00 - 14:00", "14:00 - 15:00", "15:00 - 16:00", "16:00 - 17:00", "17:00 - 18:00", "18:00 - 19:00", "19:00 - 20:00", "20:00 - 21:00", "21:00 - 22:00" }));
        cmbHorario.setBackground(Color.WHITE);
        cmbHorario.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(68, 68, 68)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDias, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(cmbDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(cmbHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 46, Short.MAX_VALUE))
        );

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(79, 79, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Profesor:");

        cmbProfesores.setBackground(Color.WHITE);
        cmbProfesores.setOpaque(true);

        txtDescripcion.setBackground(new java.awt.Color(242, 242, 242));
        txtDescripcion.setColumns(20);
        txtDescripcion.setRows(5);
        spDescripcion.setViewportView(txtDescripcion);

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(79, 79, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Descripción:");

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(79, 79, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("*");

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(79, 79, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("*");

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(79, 79, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("*");

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(79, 79, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("*");

        jLabel17.setFont(new java.awt.Font("Yu Gothic UI", 0, 30)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(79, 79, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("€");

        jLabel18.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(79, 79, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("*");

        txtCuota.setBackground(new java.awt.Color(242, 242, 242));
        txtCuota.setFont(new java.awt.Font("Yu Gothic UI", 1, 16)); // NOI18N
        txtCuota.setForeground(new java.awt.Color(102, 102, 102));
        txtCuota.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCuota.setActionCommand("<Not Set>");
        txtCuota.setBorder(null);
        txtCuota.setOpaque(true);

        jLabel19.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(79, 79, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Cuota:");

        javax.swing.GroupLayout pDatosCursoLayout = new javax.swing.GroupLayout(pDatosCurso);
        pDatosCurso.setLayout(pDatosCursoLayout);
        pDatosCursoLayout.setHorizontalGroup(
            pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosCursoLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosCursoLayout.createSequentialGroup()
                        .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDatosCursoLayout.createSequentialGroup()
                                .addComponent(cmbProfesores, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(pDatosCursoLayout.createSequentialGroup()
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(pDatosCursoLayout.createSequentialGroup()
                                .addComponent(txtCuota, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel18)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 149, Short.MAX_VALUE))
                    .addGroup(pDatosCursoLayout.createSequentialGroup()
                        .addComponent(txtCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDatosCursoLayout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosCursoLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(pDatosCursoLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pDatosCursoLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(58, 58, 58))
        );
        pDatosCursoLayout.setVerticalGroup(
            pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosCursoLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(txtCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cmbProfesores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosCursoLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel19))
                    .addGroup(pDatosCursoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDatosCursoLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCuota, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel18))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addGap(3, 3, 3)
                .addComponent(spDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(pDatosCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pDatosCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pDatosCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        txtNombre.setText("");
        txtCapacidad.setText("");
        txtDescripcion.setText("");
        txtCuota.setText("");

        cmbProfesores.setSelectedIndex(0);
        cmbDias.setSelectedIndex(0);
        cmbHorario.setSelectedIndex(0);

        txtNombre.requestFocus();
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
        String nombre = txtNombre.getText();
        int capacidad = 0;
        String profe = (String) cmbProfesores.getSelectedItem();
        String dia = (String) cmbDias.getSelectedItem();
        String hora = (String) cmbHorario.getSelectedItem();
        String descripcion = txtDescripcion.getText();
        int cuota;
        //valor del día y hora seleccionado por el usuario en el formato a almacenar en la BD
        String diaHorario = "";
        for (Map.Entry<String, String> entry : dias.entrySet()) {
            if (entry.getValue().equals(dia)) {
                diaHorario = entry.getKey();
            }
        }

        String horaHorario = "";
        for (Map.Entry<String, String> entry : horas.entrySet()) {
            if (entry.getValue().equals(hora)) {
                horaHorario = entry.getKey();
            }
        }

        String horarioCompl = diaHorario + horaHorario;

        //lista de cursos para controlar los horarios disponibles
        List<Curso> listaCursos = cursoDAO.findAll();
        boolean existe = false;
        if (listaCursos != null) {
            for (Curso result : listaCursos) {
                if (result.getHorario().equals(horarioCompl)) {
                    existe = true;
                    aux.mostrarMensaje("Horario no disponible", "Info", "Info");
                }
            }
        }

        boolean error = false;
        try {
            //si el horario está disponible
            if (!existe) {
                //si la capacidad tiene algún valor
                if (!txtCapacidad.getText().isEmpty() && !txtCapacidad.getText().trim().isEmpty()) {
                    try {
                        capacidad = Integer.parseInt(txtCapacidad.getText());
                    } catch (NumberFormatException ex) {
                        error = true;
                        aux.mostrarMensaje("Error: el Nº de Alumnos debe contener un valor numérico", "Error", "Error");
                    }
                    if (!nombre.isEmpty() && !nombre.trim().isEmpty()) {
                        if (!txtCuota.getText().isEmpty() && !txtCuota.getText().trim().isEmpty()) {
                            try {
                                cuota = Integer.parseInt(txtCuota.getText());
                                if (!error) {

                                    List<Profesor> listaProfesors = profesorDAO.findAll();
                                    Profesor profesor = null;

                                    //Buscar profesor por el nombre seleccionado en el comboBox
                                    if (listaProfesors != null) {
                                        for (Profesor resultado : listaProfesors) {
                                            String nombreComp = resultado.getNombre() + " " + resultado.getApellidos();
                                            if (nombreComp.equals(profe)) {
                                                profesor = resultado;
                                                break;
                                            }
                                        }
}

                                    curso.setNombre(nombre+" "+horarioCompl);
                                    curso.setCapacidad(capacidad);
                                    curso.setHorario(horarioCompl);
                                    curso.setDescripcion(descripcion);
                                    curso.setCuota(cuota);
                                    curso.setProfesor(profesor);

                                    cursoDAO.save(curso);


                                    Window parent = SwingUtilities.getWindowAncestor(this);
                                    parent.dispose();
                                     
                        
                                }
                            } catch (NumberFormatException ex) {
                                aux.mostrarMensaje("Debe introducir un valor válido de Cuota", "Error", "Error");
                            }
                        } else {
                            aux.mostrarMensaje("Debe introducir una Cuota", "Error", "Error");
                        }
                    } else {
                        aux.mostrarMensaje("Debe introducir un Nombre para el curso ", "Error", "Error");
                    }

                } else {
                    aux.mostrarMensaje("Debe introducir el Nº de Alumnos ", "Error", "Error");
                }
            }
        } catch (Exception ex) {
            aux.mostrarMensaje("Error..", "Error", "Error");
           
        }

    }//GEN-LAST:event_btGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btGuardar;
    private javax.swing.JButton btLimpiar;
    private javax.swing.JComboBox<String> cmbDias;
    private javax.swing.JComboBox<String> cmbHorario;
    private javax.swing.JComboBox<String> cmbProfesores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pDatosCurso;
    private javax.swing.JScrollPane spDescripcion;
    private javax.swing.JTextField txtCapacidad;
    private javax.swing.JTextField txtCuota;
    private javax.swing.JTextArea txtDescripcion;
    public javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void cargarComboProfesores() {
        List<Profesor> listaProfesors = profesorDAO.findAll();

        try {

            if (listaProfesors != null) {
                for (Profesor resultado : listaProfesors) {
                    String nombreComp = resultado.getNombre() + " " + resultado.getApellidos();
                    cmbProfesores.addItem(nombreComp);
                }
            }
           
        } catch (Exception ex) {
            aux.mostrarMensaje("Error al cargar los datos, Actualice los Profesores", "Error", "Error");
        }
    }

   
}

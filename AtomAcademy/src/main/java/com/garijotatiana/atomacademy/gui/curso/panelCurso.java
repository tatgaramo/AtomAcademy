package com.garijotatiana.atomacademy.gui.curso;

import com.garijotatiana.atomacademy.Auxiliar;
import com.garijotatiana.atomacademy.DAO.CursoDAO;
import com.garijotatiana.atomacademy.DAO.ProfesorDAO;
import com.garijotatiana.atomacademy.DAO.impl.CursoDAOImplHiber;
import com.garijotatiana.atomacademy.DAO.impl.ProfesorDAOImplHiber;
import com.garijotatiana.atomacademy.gui.principal.frameAuxiliar;
import com.garijotatiana.atomacademy.model.Alumno;
import com.garijotatiana.atomacademy.model.Curso;
import com.garijotatiana.atomacademy.model.Profesor;
import com.garijotatiana.atomacademy.plantilla.AccionesPDF;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tatiana
 */
public class panelCurso extends javax.swing.JPanel {

    ProfesorDAO profesorDAO = new ProfesorDAOImplHiber(Profesor.class);
    CursoDAO cursoDAO = new CursoDAOImplHiber(Curso.class);
    List<Curso> listaCompleta = cursoDAO.findAll();
    Auxiliar aux = new Auxiliar();

    public panelCurso() {
        initComponents();
        cargarTabla(listaCompleta);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        pnBotones = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        btEdit = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btPdf = new javax.swing.JButton();
        pnBuscar = new javax.swing.JPanel();
        btBuscar = new javax.swing.JButton();
        btLimpiar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        cmbBuscar = new javax.swing.JComboBox<>();
        spTablaCursos = new javax.swing.JScrollPane();
        tbCursos = new javax.swing.JTable();
        laTitulo = new javax.swing.JLabel();
        btActualizar = new javax.swing.JButton();
        btCompleto = new javax.swing.JButton();
        btDisponible = new javax.swing.JButton();

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(870, 620));

        pnBotones.setOpaque(false);

        btAdd.setBackground(new java.awt.Color(140, 166, 219));
        btAdd.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btAdd.setForeground(new java.awt.Color(255, 255, 255));
        btAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mas.png"))); // NOI18N
        btAdd.setText(" Añadir");
        btAdd.setBorderPainted(false);
        btAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btAdd.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btEdit.setBackground(new java.awt.Color(140, 166, 219));
        btEdit.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btEdit.setForeground(new java.awt.Color(255, 255, 255));
        btEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lapiz.png"))); // NOI18N
        btEdit.setText(" Editar");
        btEdit.setBorderPainted(false);
        btEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btEdit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });

        btDelete.setBackground(new java.awt.Color(140, 166, 219));
        btDelete.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btDelete.setForeground(new java.awt.Color(255, 255, 255));
        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/papelera.png"))); // NOI18N
        btDelete.setText(" Eliminar");
        btDelete.setToolTipText("No se puede eliminar un curso que tiene Alumnos asociados");
        btDelete.setBorderPainted(false);
        btDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btPdf.setBackground(new java.awt.Color(140, 166, 219));
        btPdf.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btPdf.setForeground(new java.awt.Color(255, 255, 255));
        btPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pdf.png"))); // NOI18N
        btPdf.setBorderPainted(false);
        btPdf.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnBotonesLayout = new javax.swing.GroupLayout(pnBotones);
        pnBotones.setLayout(pnBotonesLayout);
        pnBotonesLayout.setHorizontalGroup(
            pnBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBotonesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPdf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnBotonesLayout.setVerticalGroup(
            pnBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pnBuscar.setOpaque(false);

        btBuscar.setBackground(new java.awt.Color(140, 166, 219));
        btBuscar.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buscar.png"))); // NOI18N
        btBuscar.setText(" Buscar");
        btBuscar.setBorderPainted(false);
        btBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btBuscar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btBuscar.setMargin(new java.awt.Insets(2, 2, 3, 14));
        btBuscar.setPreferredSize(new java.awt.Dimension(133, 39));
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        btLimpiar.setBackground(new java.awt.Color(140, 166, 219));
        btLimpiar.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/borrar.png"))); // NOI18N
        btLimpiar.setText(" Limpiar");
        btLimpiar.setBorderPainted(false);
        btLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLimpiar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btLimpiar.setMargin(new java.awt.Insets(2, 4, 3, 14));
        btLimpiar.setMaximumSize(new java.awt.Dimension(113, 39));
        btLimpiar.setMinimumSize(new java.awt.Dimension(113, 39));
        btLimpiar.setPreferredSize(new java.awt.Dimension(133, 39));
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        cmbBuscar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Nombre", "Descripción", "Precio", "Profesor", " " }));
        cmbBuscar.setBackground(Color.WHITE);
        cmbBuscar.setOpaque(true);

        javax.swing.GroupLayout pnBuscarLayout = new javax.swing.GroupLayout(pnBuscar);
        pnBuscar.setLayout(pnBuscarLayout);
        pnBuscarLayout.setHorizontalGroup(
            pnBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbBuscar, 0, 184, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnBuscarLayout.setVerticalGroup(
            pnBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spTablaCursos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tbCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbCursos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbCursos.setAutoscrolls(false);
        tbCursos.setPreferredSize(new java.awt.Dimension(700, 500));
        tbCursos.setSelectionBackground(new java.awt.Color(140, 166, 219));
        tbCursos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spTablaCursos.setViewportView(tbCursos);

        laTitulo.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        laTitulo.setForeground(new java.awt.Color(79, 79, 255));
        laTitulo.setText("Registros de Cursos");

        btActualizar.setBackground(new java.awt.Color(140, 166, 219));
        btActualizar.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        btActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/actualizar.png"))); // NOI18N
        btActualizar.setToolTipText("Actualizar");
        btActualizar.setBorderPainted(false);
        btActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btActualizar.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btActualizar.setMargin(new java.awt.Insets(2, 4, 3, 14));
        btActualizar.setMaximumSize(new java.awt.Dimension(113, 39));
        btActualizar.setMinimumSize(new java.awt.Dimension(113, 39));
        btActualizar.setPreferredSize(new java.awt.Dimension(133, 39));
        btActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btActualizarActionPerformed(evt);
            }
        });

        btCompleto.setBackground(new java.awt.Color(204, 204, 255));
        btCompleto.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        btCompleto.setForeground(new java.awt.Color(79, 79, 255));
        btCompleto.setText("Completo");
        btCompleto.setBorderPainted(false);
        btCompleto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btCompleto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btCompleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCompletoActionPerformed(evt);
            }
        });

        btDisponible.setBackground(new java.awt.Color(204, 204, 255));
        btDisponible.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        btDisponible.setForeground(new java.awt.Color(79, 79, 255));
        btDisponible.setText("Disponible");
        btDisponible.setBorderPainted(false);
        btDisponible.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btDisponible.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDisponibleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTablaCursos)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(laTitulo)
                        .addGap(226, 226, 226)
                        .addComponent(btCompleto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btDisponible)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addComponent(pnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(pnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(laTitulo)
                    .addComponent(btActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spTablaCursos, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(pnBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
frameAuxiliar pantalla = new frameAuxiliar();

    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed
        //controlar que la tabla no esté vacía
        if (tbCursos.getRowCount() > 0) {
            //controlar que haya un registro seleccionado
            if (tbCursos.getSelectedRow() != -1) {
                int id = (int) tbCursos.getValueAt(tbCursos.getSelectedRow(), 0);
                //Comprobar que hay registro de profesores
                List<Profesor> listaProfesors = profesorDAO.findAll();
                if (!listaProfesors.isEmpty()) {
                    //llamda método buscar por ID
                    Curso curso = cursoDAO.findById(id);

                    //abrir el panel para editar el registro pasando el curso encontrado
                    panelEditarCurso panel = new panelEditarCurso(curso);

                    JDialog dialogo = new JDialog(pantalla, "Editar Registro Curso", true);
                    dialogo.setContentPane(panel);
                    dialogo.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                    dialogo.pack();
                    dialogo.setLocationRelativeTo(null);
                    dialogo.setVisible(true);
                } else {
                    aux.mostrarMensaje("No hay registros de profesores", "Info", "Info");
                }

            } else {
                aux.mostrarMensaje("No hay ningún registro seleccionado", "Error", "Error");
            }
        } else {
            aux.mostrarMensaje("No hay registros para editar", "Error", "Error al editar");
        }

    }//GEN-LAST:event_btEditActionPerformed
    List<Curso> listaBusqueda = new ArrayList<>();
    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        listaBusqueda.clear();
        String valorBusqueda = txtBuscar.getText();

        //Pattern pattern;
        //Matcher matcher;
        try {
            //controlar el el valor de busqueda no esté vacío
            if (!valorBusqueda.isEmpty() && !valorBusqueda.trim().isEmpty()) {
                String propiedad = (String) cmbBuscar.getSelectedItem();

                switch (propiedad) {
                    case "ID":
                        try {
                            int id = Integer.parseInt(valorBusqueda);
                            Curso curso = cursoDAO.findById(id);
                            if (curso != null) {
                                listaBusqueda.add(curso);
                            } else {
                                aux.mostrarMensaje("No encontrado curso con el ID introducido", "Error", "Error al editar");
                            }

                        } catch (NumberFormatException e) {
                            aux.mostrarMensaje("Debe introducir un valor numérico para buscar por ID", "Error", "Error al editar");
                        } catch (Exception e) {
                            aux.mostrarMensaje("Error", "Error", "Error al editar");
                            e.printStackTrace();
                        }

                        break;

                    case "Descripción":
                        listaBusqueda = cursoDAO.findLike("descripcion", valorBusqueda);
                        if (listaBusqueda == null || listaBusqueda.isEmpty()) {
                            aux.mostrarMensaje("No encontrado registro con los valores introducidos", "Error", "Error al editar");
                        }
                        break;

                    case "Nombre":
                        listaBusqueda = cursoDAO.findLike(propiedad.toLowerCase(), valorBusqueda);
                        if (listaBusqueda == null || listaBusqueda.isEmpty()) {
                            aux.mostrarMensaje("No encontrado registro con los valores introducidos", "Error", "Error al editar");
                        }
                        break;

                    case "Precio":
                        try {
                            int precio = Integer.parseInt(valorBusqueda);
                            listaBusqueda = cursoDAO.findByCuota(precio);
                            if (listaBusqueda == null) {
                                aux.mostrarMensaje("No encontrado registro de curso con los datos introducidos", "Error", "Error al editar");
                            }
                        } catch (Exception ex) {
                            aux.mostrarMensaje("Debe introducir valor de precio válido", "Error", "Error");
                        }

                        break;

                    case "Profesor":
                        listaBusqueda = cursoDAO.findCursosByAlumnoNombreOrApellidos(valorBusqueda);
                        if (listaBusqueda == null || listaBusqueda.isEmpty()) {
                            aux.mostrarMensaje("No encontrado registro de nota con los datos introducidos", "Error", "Error al editar");
                        }
                        break;
                }
                cargarTabla(listaBusqueda);

            } else {
                //cargarTabla(listaCompleta);
                aux.mostrarMensaje("Debe indicar un criterio de búsqueda", "Error", "Error al editar");
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_btBuscarActionPerformed

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        txtBuscar.setText("");
        cmbBuscar.setSelectedIndex(0);
        cargarTabla(cursoDAO.findAll());
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        List<Profesor> listaProfesors = profesorDAO.findAll();
        if (!listaProfesors.isEmpty()) {
            panelNuevoCurso panel = new panelNuevoCurso();

            JDialog dialogo = new JDialog(pantalla, "Nuevo Registro Curso", true);
            dialogo.setContentPane(panel);
            dialogo.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialogo.pack();
            dialogo.setLocationRelativeTo(null);
            dialogo.setVisible(true);
        } else {
            aux.mostrarMensaje("No hay registros de profesores", "Info", "Info");
        }

    }//GEN-LAST:event_btAddActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        try {
            //controlar que la tabla no esté vacía
            if (tbCursos.getRowCount() > 0) {
                //controlar que haya un registro seleccionado
                if (tbCursos.getSelectedRow() != -1) {
                    //confirmar que el usuario quiere eliminar el registro
                    int opcion = JOptionPane.showConfirmDialog(null, "¿Seguro que desea Eliminar el registro? ", "Confirmación", JOptionPane.YES_NO_OPTION);

                    if (opcion == JOptionPane.YES_OPTION) {
                        int id = (int) tbCursos.getValueAt(tbCursos.getSelectedRow(), 0);
                        //llamda método buscar por ID
                        Curso curso = cursoDAO.findById(id);
                        List<Alumno> listaAlumnos = curso.getAlumnos();
                        if (!listaAlumnos.isEmpty() && listaAlumnos != null) {
                            aux.mostrarMensaje("Este curso no se puede eliminar, tiene Alumnos inscritos", "Error", "Error al eliminar");
                        } else {
                            //llamada al método para borrar el registro
                            cursoDAO.delete(curso);
                        }

                    } else {
                        aux.mostrarMensaje("Registro no eliminado", "Info", "Eliminar registro cancelado");
                    }

                } else {
                    aux.mostrarMensaje("No hay ningún registro seleccionado", "Error", "Error al eliminar");
                }
            } else {
                aux.mostrarMensaje("No hay registros para elimiar", "Error", "Error al eliminar");
            }
        } catch (Exception ex) {
            aux.mostrarMensaje("Error", "Error", "Error al eliminar");
        }

        cargarTabla(cursoDAO.findAll());

    }//GEN-LAST:event_btDeleteActionPerformed

    private void btActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btActualizarActionPerformed
        cargarTabla(cursoDAO.findAll());
    }//GEN-LAST:event_btActualizarActionPerformed

    private void btCompletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCompletoActionPerformed
        listaBusqueda = cursoDAO.findCursosByCompletos();
        if (listaBusqueda == null || listaBusqueda.isEmpty()) {
            aux.mostrarMensaje("No hay registros de cursos con completos", "Error", "Error al editar");
        }
        cargarTabla(listaBusqueda);
    }//GEN-LAST:event_btCompletoActionPerformed

    private void btDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDisponibleActionPerformed
        listaBusqueda = cursoDAO.findCursosByIncompletos();
        if (listaBusqueda == null || listaBusqueda.isEmpty()) {
            aux.mostrarMensaje("No hay registros de cursos con disponibles", "Error", "Error al editar");
        }
        cargarTabla(listaBusqueda);
    }//GEN-LAST:event_btDisponibleActionPerformed

    private void btPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPdfActionPerformed
        AccionesPDF pdf = new AccionesPDF();
        pdf.crearPlantilla("REGISTROS CURSOS", tbCursos, titulos);
    }//GEN-LAST:event_btPdfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btActualizar;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btCompleto;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btDisponible;
    private javax.swing.JButton btEdit;
    private javax.swing.JButton btLimpiar;
    private javax.swing.JButton btPdf;
    private javax.swing.JComboBox<String> cmbBuscar;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel laTitulo;
    private javax.swing.JPanel pnBotones;
    private javax.swing.JPanel pnBuscar;
    private javax.swing.JScrollPane spTablaCursos;
    private javax.swing.JTable tbCursos;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
 String titulos[] = {"ID", "Nombre", "Horario", "Capacidad", "Descripcion", "numAlu", "Profesor", "Pecio"};

    private void cargarTabla(List<Curso> listaCursos) {
        //definir el modelo de la vista de la Tabla
        DefaultTableModel modeloTabla = new DefaultTableModel() {
            //filas y columnas no editables
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        //establecer nombres de columnas
        modeloTabla.setColumnIdentifiers(titulos);

        //recorrer lista y mostrar los elementos de la tabla
        if (listaCursos != null) {
            for (Curso i : listaCursos) {
                //creamos el array de tipo object porque vamos a guardar diferentes tipos de datos
                Object[] objeto = {i.getId(), i.getNombre(), i.getHorario(), i.getCapacidad(), i.getDescripcion(), i.getNumAlu(), i.getProfesor().getNombre() + " " + i.getProfesor().getApellidos(), i.getCuota()};

                modeloTabla.addRow(objeto);
            }
        }
        tbCursos.setModel(modeloTabla);

    }

}

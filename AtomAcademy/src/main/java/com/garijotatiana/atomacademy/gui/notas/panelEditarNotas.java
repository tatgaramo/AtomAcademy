package com.garijotatiana.atomacademy.gui.notas;

import com.garijotatiana.atomacademy.Auxiliar;
import com.garijotatiana.atomacademy.DAO.AlumnoDAO;
import com.garijotatiana.atomacademy.DAO.CursoDAO;
import com.garijotatiana.atomacademy.DAO.NotaDAO;
import com.garijotatiana.atomacademy.DAO.impl.AlumnoDAOImplHiber;
import com.garijotatiana.atomacademy.DAO.impl.CursoDAOImplHiber;
import com.garijotatiana.atomacademy.DAO.impl.NotaDAOImplHiber;
import com.garijotatiana.atomacademy.model.Alumno;
import com.garijotatiana.atomacademy.model.Curso;
import com.garijotatiana.atomacademy.model.Nota;
import java.awt.Color;
import java.awt.Window;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.SwingUtilities;

/**
 *
 * @author Tatiana
 */
public class panelEditarNotas extends javax.swing.JPanel {

    Nota nota;
    CursoDAO cursoDAO = new CursoDAOImplHiber(Curso.class);
    NotaDAO notaDAO = new NotaDAOImplHiber(Nota.class);
    AlumnoDAO alumnoDAO = new AlumnoDAOImplHiber(Alumno.class);
    Auxiliar aux=new Auxiliar();

    public panelEditarNotas(Nota nota) {
        this.nota = nota;
        initComponents();
        cargarComboCursos();
        cargarDatosNota();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pDatosNotas = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtDoc = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        cmbCurso = new javax.swing.JComboBox<>();
        cmbEvaluacion = new javax.swing.JComboBox<>();
        btLimpiar = new javax.swing.JButton();
        btModificar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ftxtNota = new javax.swing.JFormattedTextField();
        txtIDNota = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        pDatosNotas.setBackground(new java.awt.Color(255, 255, 255));
        pDatosNotas.setPreferredSize(new java.awt.Dimension(683, 621));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(79, 79, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID Alumno:");

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(79, 79, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(79, 79, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Curso:");

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(79, 79, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Documento:");

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(79, 79, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Evaluación:");

        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(223, 223, 249));
        txtID.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtID.setForeground(new java.awt.Color(102, 102, 102));
        txtID.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtID.setActionCommand("<Not Set>");
        txtID.setBorder(null);
        txtID.setOpaque(true);

        txtNombre.setEditable(false);
        txtNombre.setBackground(new java.awt.Color(223, 223, 249));
        txtNombre.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(102, 102, 102));
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtNombre.setActionCommand("<Not Set>");
        txtNombre.setBorder(null);
        txtNombre.setOpaque(true);

        txtDoc.setEditable(false);
        txtDoc.setBackground(new java.awt.Color(223, 223, 249));
        txtDoc.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtDoc.setForeground(new java.awt.Color(102, 102, 102));
        txtDoc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDoc.setActionCommand("<Not Set>");
        txtDoc.setBorder(null);
        txtDoc.setOpaque(true);

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(79, 79, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Apellidos:");

        txtApellidos.setEditable(false);
        txtApellidos.setBackground(new java.awt.Color(223, 223, 249));
        txtApellidos.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtApellidos.setForeground(new java.awt.Color(102, 102, 102));
        txtApellidos.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtApellidos.setActionCommand("<Not Set>");
        txtApellidos.setBorder(null);
        txtApellidos.setOpaque(true);

        cmbCurso.setBackground(Color.WHITE);
        cmbCurso.setOpaque(true);

        cmbEvaluacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1ª EV", "2ª EV", "3ª EV", "FINAL" }));
        cmbEvaluacion.setBackground(Color.WHITE);
        cmbEvaluacion.setOpaque(true);

        btLimpiar.setBackground(new java.awt.Color(140, 166, 219));
        btLimpiar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/borrar.png"))); // NOI18N
        btLimpiar.setText(" Limpiar");
        btLimpiar.setBorderPainted(false);
        btLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btLimpiar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btLimpiar.setPreferredSize(new java.awt.Dimension(149, 39));
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        btModificar.setBackground(new java.awt.Color(140, 166, 219));
        btModificar.setFont(new java.awt.Font("Yu Gothic UI", 1, 20)); // NOI18N
        btModificar.setForeground(new java.awt.Color(255, 255, 255));
        btModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disquete.png"))); // NOI18N
        btModificar.setText("Modificar");
        btModificar.setBorderPainted(false);
        btModificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btModificar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btModificar.setPreferredSize(new java.awt.Dimension(149, 39));
        btModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificarActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(79, 79, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Nota:");

        ftxtNota.setBackground(new java.awt.Color(242, 242, 242));
        ftxtNota.setForeground(new java.awt.Color(102, 102, 102));
        try {
            ftxtNota.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtNota.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ftxtNota.setFont(new java.awt.Font("Yu Gothic UI", 1, 16)); // NOI18N

        txtIDNota.setEditable(false);
        txtIDNota.setBackground(new java.awt.Color(223, 223, 249));
        txtIDNota.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        txtIDNota.setForeground(new java.awt.Color(102, 102, 102));
        txtIDNota.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtIDNota.setActionCommand("<Not Set>");
        txtIDNota.setBorder(null);
        txtIDNota.setOpaque(true);

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(79, 79, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("ID Nota:");

        javax.swing.GroupLayout pDatosNotasLayout = new javax.swing.GroupLayout(pDatosNotas);
        pDatosNotas.setLayout(pDatosNotasLayout);
        pDatosNotasLayout.setHorizontalGroup(
            pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosNotasLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pDatosNotasLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pDatosNotasLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbEvaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(95, 95, 95)
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ftxtNota, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pDatosNotasLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pDatosNotasLayout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtIDNota, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pDatosNotasLayout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        pDatosNotasLayout.setVerticalGroup(
            pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDatosNotasLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtIDNota, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmbEvaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pDatosNotasLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(ftxtNota, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(pDatosNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pDatosNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pDatosNotas, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        ftxtNota.setText("");
        cmbCurso.setSelectedIndex(0);
        cmbEvaluacion.setSelectedIndex(0);

        ftxtNota.setEditable(true);

        cmbCurso.setEnabled(true);
        cmbEvaluacion.setEnabled(true);

        ftxtNota.requestFocus();
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void btModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModificarActionPerformed
        String nombreCurso = (String) cmbCurso.getSelectedItem();
        String evaluacion = (String) cmbEvaluacion.getSelectedItem();
        String valorNota = ftxtNota.getText();
        Curso curso = null;

        //comprobar que la nota tiene valor y es un valor válido 
        if (!valorNota.isEmpty() && !valorNota.trim().isEmpty()) {
            try {
                //validación del formato, aunque se está haciendo es un formatedTextField con máscara
                String formatoNota = "^\\d+\\.\\d{2}$";
                Pattern pattern = Pattern.compile(formatoNota);
                Matcher matcher = pattern.matcher(valorNota);
                if (matcher.matches()) {//si el valor de nota tiene el formato válido
                    float notaValida = Float.parseFloat(valorNota);
                    boolean rangoNota = (notaValida <= 10.00 && notaValida >= 00.00);
                    int idAlumno = nota.getAlumno().getId();
                    List<Nota> listaNotas = notaDAO.findAll();
                    //comprobar si ya existe un registro coincidente para alumno, curso y evaluación,(no se puede repetir)
                    boolean existeNota = listaNotas.stream().anyMatch(r -> r.getAlumno().getId().equals(idAlumno) && r.getEvaluacion().equals(evaluacion) && r.getCurso().getNombre().equals(nombreCurso));
                    if(existeNota){
                        if(nota.getCurso().getNombre().equals(nombreCurso)&& nota.getEvaluacion().equals(evaluacion)){
                            existeNota=false;
                        }
                    }
                    if (!existeNota && rangoNota) {//comprobar si ya existe un registro del alumno para ese periodo y el valor de nota está dentro del rango
                        List<Curso> listaCursos = cursoDAO.findAll();
                        //buscar curso por nombre
                        for (Curso c : listaCursos) {
                            if (c.getNombre().equals(nombreCurso)) {
                                curso = c;
                                break;
                            }
                        }

                        nota.setCurso(curso);
                        nota.setEvaluacion(evaluacion);
                        nota.setNota(notaValida);

                        notaDAO.update(nota);
                       
                        //cerrar ventana
                        Window parent = SwingUtilities.getWindowAncestor(this);
                        parent.dispose();
                    } else {
                        if (existeNota) {
                            aux.mostrarMensaje("Ya existe un Registro de Nota para el Curso y la Evaluación seleccionada", "Error", "Error");

                        }
                        if (!rangoNota) {
                            aux.mostrarMensaje("La nota debe estar dentro de rango 10.00 - 00.00", "Error", "Error");

                        }
                    }
                } else {
                    aux.mostrarMensaje("Debe introducir un valor de nota válido", "Error", "Error");
                }

            } catch (Exception ex) {
                aux.mostrarMensaje("Error", "Error", "Error");
            }
        } else {
            aux.mostrarMensaje("Debe introducir un valor para Nota", "Error", "Error");
        }

    }//GEN-LAST:event_btModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLimpiar;
    private javax.swing.JButton btModificar;
    private javax.swing.JComboBox<String> cmbCurso;
    private javax.swing.JComboBox<String> cmbEvaluacion;
    private javax.swing.JFormattedTextField ftxtNota;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel pDatosNotas;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtDoc;
    public javax.swing.JTextField txtID;
    public javax.swing.JTextField txtIDNota;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void cargarComboCursos() {//cargar los cursos a los que pertenece
        int idAlumno=nota.getAlumno().getId();
        Alumno alu=alumnoDAO.findById(idAlumno);
        List<Curso> listaCursos =alu.getCursos();

        try {
            if (listaCursos != null) {
                for (Curso resultado : listaCursos) {
                    cmbCurso.addItem(resultado.getNombre());
                }
            }
        } catch (Exception ex) {
            aux.mostrarMensaje("Error al cargar los datos, Actualice los Cursos", "Error", "Error");
        }
    }

    private void cargarDatosNota() {
        try {
            String idNota=Integer.toString(nota.getId());
            String idAlumno = Integer.toString(nota.getAlumno().getId());
            String nombre = nota.getAlumno().getNombre();
            String apellidos = nota.getAlumno().getApellidos();
            String documento = nota.getAlumno().getDocumento();

            String curso = nota.getCurso().getNombre();
            String evaluacion = nota.getEvaluacion();
            float valorNota = nota.getNota();//devuelve un valor en formato 0,00
            //convertir el valor para que sea compatible con la máscara del campo JFormatedTextField para el valor Nota
            DecimalFormatSymbols symbols= new DecimalFormatSymbols();
            symbols.setDecimalSeparator('.');
            DecimalFormat df = new DecimalFormat("00.00",symbols);
            String notaFormateada = df.format(valorNota);
            ftxtNota.setText(notaFormateada);
            txtID.setText(idAlumno);
            txtNombre.setText(nombre);
            txtApellidos.setText(apellidos);
            txtDoc.setText(documento);
            txtIDNota.setText(idNota);

            cmbCurso.setSelectedItem(curso);
            cmbEvaluacion.setSelectedItem(evaluacion);

        } catch (Exception e) {
            aux.mostrarMensaje("ERROR", "Error", "Error");
        }
    }

}
